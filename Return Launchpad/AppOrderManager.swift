//
//  AppOrderManager.swift
//  Return Launchpad
//
//  Created by –°–µ—Ä–≥–µ–π –®–æ—Ä–∏–Ω on 22.08.2025.
//

import Foundation
import SwiftUI
import AppKit

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
class AppOrderManager: ObservableObject {
    /// –õ–æ–≥–≥–µ—Ä –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ persistence –æ–ø–µ—Ä–∞—Ü–∏–π
    private let logger = PersistenceLogger.shared
    /// –ú–Ω–æ–≥–æ—É—Ä–æ–≤–Ω–µ–≤–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è UserDefaults –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    private let persistenceStrategy: PersistenceStrategy
    
    /// –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
    private let instanceId = UUID()
    
    /// –ò–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π
    private let currentUser = NSUserName()
    
    private var saveWorkItem: DispatchWorkItem?
    
    /// –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    private var customOrderEnabledKey: String { "\(currentUser)_isCustomOrderEnabled" }
    private var userAppOrderKey: String { "\(currentUser)_userAppOrder" }
    
    /// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π persistence
    private struct PersistenceStrategy {
        let primary: UserDefaults
        let fallback: UserDefaults
        let description: String
        
        init() {
            // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å app group (–∏–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è)
            if let appGroupDefaults = UserDefaults(suiteName: "group.shorins.return-launchpad") {
                self.primary = appGroupDefaults
                self.fallback = UserDefaults.standard
                self.description = "App Group + Standard fallback"
            } else {
                // Fallback –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ UserDefaults
                self.primary = UserDefaults.standard
                self.fallback = UserDefaults.standard
                self.description = "Standard UserDefaults only"
            }
        }
        
        func set(_ value: Any?, forKey key: String) {
            let logger = PersistenceLogger.shared
            logger.logUserDefaultsOperation("SET", key: key, value: value, storage: "primary")
            
            primary.set(value, forKey: key)
            // primary.synchronize()
            
            // –î—É–±–ª–∏—Ä—É–µ–º –≤ fallback –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
            if primary !== fallback {
                logger.logUserDefaultsOperation("SET_FALLBACK", key: key, value: value, storage: "fallback")
                fallback.set(value, forKey: key)
                // fallback.synchronize()
            }
            
            logger.log(.info, "‚úÖ Data written to both storages for key: \(key)")
        }
        
        func bool(forKey key: String) -> Bool {
            let logger = PersistenceLogger.shared
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º primary
            if primary.object(forKey: key) != nil {
                let value = primary.bool(forKey: key)
                logger.logUserDefaultsOperation("GET_PRIMARY", key: key, value: value, storage: "primary")
                return value
            }
            
            // –ï—Å–ª–∏ –≤ primary –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º fallback
            let fallbackValue = fallback.bool(forKey: key)
            logger.logUserDefaultsOperation("GET_FALLBACK", key: key, value: fallbackValue, storage: "fallback")
            return fallbackValue
        }
        
        func string(forKey key: String) -> String? {
            let logger = PersistenceLogger.shared
            
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º primary
            if let value = primary.string(forKey: key) {
                logger.logUserDefaultsOperation("GET_PRIMARY", key: key, value: value, storage: "primary")
                return value
            }
            
            // –ï—Å–ª–∏ –≤ primary –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º fallback
            if let fallbackValue = fallback.string(forKey: key) {
                logger.logUserDefaultsOperation("GET_FALLBACK", key: key, value: fallbackValue, storage: "fallback")
                return fallbackValue
            }
            
            logger.log(.warning, "‚ö†Ô∏è No data found for key: \(key) in any storage")
            return nil
        }
        
        /// –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—Ç–æ—Ä–∞–∂–∞–º–∏ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        func migrateDataIfNeeded(enabledKey: String, orderKey: String) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ fallback, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ primary
            if primary !== fallback {
                if primary.object(forKey: enabledKey) == nil && fallback.object(forKey: enabledKey) != nil {
                    let migratedEnabled = fallback.bool(forKey: enabledKey)
                    primary.set(migratedEnabled, forKey: enabledKey)
                    print("[PersistenceStrategy] –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω isCustomOrderEnabled: \(migratedEnabled)")
                }
                
                if primary.string(forKey: orderKey) == nil, let migratedOrder = fallback.string(forKey: orderKey) {
                    primary.set(migratedOrder, forKey: orderKey)
                    print("[PersistenceStrategy] –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω userAppOrder: \(migratedOrder.count) —Å–∏–º–≤–æ–ª–æ–≤")
                }
                
                // primary.synchronize()
            }
        }
        
        /// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        func validateData(enabledKey: String, orderKey: String) -> (isValid: Bool, issues: [String]) {
            var issues: [String] = []
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON —Å—Ç—Ä–æ–∫—É
            if let orderJSON = string(forKey: orderKey), !orderJSON.isEmpty {
                if let data = orderJSON.data(using: .utf8) {
                    do {
                        _ = try JSONDecoder().decode([String].self, from: data)
                    } catch {
                        issues.append("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON –≤ userAppOrder")
                    }
                } else {
                    issues.append("–ù–µ —É–¥–∞–µ—Ç—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å userAppOrder –≤ Data")
                }
            }
            
            return (isValid: issues.isEmpty, issues: issues)
        }
    }
    
    /// –í–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é false - –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π)
    @Published var isCustomOrderEnabled: Bool = false {
        didSet {
            logger.log(.info, "üíæ Instance \(instanceId.uuidString.prefix(8)) - Custom Order State Changed: \(oldValue) ‚Üí \(isCustomOrderEnabled)")
            persistenceStrategy.set(isCustomOrderEnabled, forKey: customOrderEnabledKey)
            logger.log(.info, "‚úÖ Instance \(instanceId.uuidString.prefix(8)) - –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(currentUser): isCustomOrderEnabled=\(isCustomOrderEnabled)")
        }
    }
    
    /// –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –∫–∞–∫ JSON —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è
    @Published private var userOrderJSON: String = "" {
        didSet {
            logger.log(.info, "üìù User Order JSON Changed: \(oldValue.count) ‚Üí \(userOrderJSON.count) characters")
            persistenceStrategy.set(userOrderJSON, forKey: userAppOrderKey)
            logger.log(.info, "‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(currentUser): \(userDefinedOrder.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        }
    }
    
    /// –ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–º–∞—Å—Å–∏–≤ bundleIdentifier)
    private var userDefinedOrder: [String] {
        get {
            guard !userOrderJSON.isEmpty,
                  let data = userOrderJSON.data(using: .utf8),
                  let order = try? JSONDecoder().decode([String].self, from: data) else {
                return []
            }
            return order
        }
        set {
            if let data = try? JSONEncoder().encode(newValue),
               let jsonString = String(data: data, encoding: .utf8) {
                userOrderJSON = jsonString
            }
        }
    }
    
    init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏—é persistence
        self.persistenceStrategy = PersistenceStrategy()
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞
        PersistenceLogger.shared.log(.info, "üè¢ AppOrderManager Instance Created: \(instanceId.uuidString.prefix(8))")
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        persistenceStrategy.migrateDataIfNeeded(enabledKey: customOrderEnabledKey, orderKey: userAppOrderKey)
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö
        let validation = persistenceStrategy.validateData(enabledKey: customOrderEnabledKey, orderKey: userAppOrderKey)
        if !validation.isValid {
            print("[AppOrderManager] –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞–Ω–Ω—ã–º–∏: \(validation.issues.joined(separator: ", "))")
            // –û—á–∏—â–∞–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            persistenceStrategy.set(false, forKey: customOrderEnabledKey)
            persistenceStrategy.set("", forKey: userAppOrderKey)
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ë–ï–ó —Ç—Ä–∏–≥–≥–µ—Ä–∞ didSet
        let savedOrderEnabled = persistenceStrategy.bool(forKey: customOrderEnabledKey)
        let savedOrderJSON = persistenceStrategy.string(forKey: userAppOrderKey) ?? ""
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞–ø—Ä—è–º—É—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏
        self._isCustomOrderEnabled = Published(initialValue: savedOrderEnabled)
        self._userOrderJSON = Published(initialValue: savedOrderJSON)
        
        print("[AppOrderManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è \(currentUser):")
        print("[AppOrderManager] Persistence strategy: \(persistenceStrategy.description)")
        print("[AppOrderManager] Data validation: \(validation.isValid ? "OK" : "FIXED")")
        print("[AppOrderManager] isCustomOrderEnabled=\(isCustomOrderEnabled), –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π: \(userDefinedOrder.count)")
        
        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        NotificationCenter.default.addObserver(
            self,
            selector: #selector(appWillTerminate),
            name: NSApplication.willTerminateNotification,
            object: nil
        )
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        Timer.scheduledTimer(withTimeInterval: 30.0, repeats: true) { _ in
            self.forceSave()
        }
    }
    
    deinit {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–∏ –æ–±—ä–µ–∫—Ç–∞
        forceSave()
        NotificationCenter.default.removeObserver(self)
        print("[AppOrderManager] –û–±—ä–µ–∫—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω, –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
    func forceSave() {
        persistenceStrategy.set(isCustomOrderEnabled, forKey: customOrderEnabledKey)
        persistenceStrategy.set(userOrderJSON, forKey: userAppOrderKey)
        print("[AppOrderManager] –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ (—Å—Ç—Ä–∞—Ç–µ–≥–∏—è: \(persistenceStrategy.description))")
    }
    
    /// –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π, –æ—Ç–º–µ–Ω—è—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    func debouncedSave() {
        saveWorkItem?.cancel() // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π save
        
        let workItem = DispatchWorkItem { [weak self] in
            self?.forceSave()
        }
        
        // –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 0.5 —Å–µ–∫—É–Ω–¥—ã
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.5, execute: workItem)
        self.saveWorkItem = workItem
    }
    
    /// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    @objc private func appWillTerminate() {
        print("[AppOrderManager] –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ...")
        forceSave()
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ (–ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Å –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–≥–æ)
    func enableCustomOrder() {
        logger.log(.info, "üîÑ Instance \(instanceId.uuidString.prefix(8)) - enableCustomOrder() called, current: \(isCustomOrderEnabled)")
        isCustomOrderEnabled = true
        logger.log(.info, "üîÑ Instance \(instanceId.uuidString.prefix(8)) - enableCustomOrder() complete, new: \(isCustomOrderEnabled)")
        // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ didSet
    }
    
    /// –í–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    func enableCustomOrderWithCurrentPositions(_ apps: [AppInfo]) {
        // –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–∑–∏—Ü–∏–∏
        let currentOrder = apps.map { $0.bundleIdentifier }
        userDefinedOrder = currentOrder
        
        // –ó–∞—Ç–µ–º –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —Ä–µ–∂–∏–º
        isCustomOrderEnabled = true
        
        print("[AppOrderManager] –í–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º \(currentOrder.count) –ø–æ–∑–∏—Ü–∏–π")
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        debouncedSave()
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞
    func verifyInitialization() -> (customOrderEnabled: Bool, savedItemsCount: Int) {
        let savedEnabled = persistenceStrategy.bool(forKey: customOrderEnabledKey)
        let savedJSON = persistenceStrategy.string(forKey: userAppOrderKey) ?? ""
        let savedCount = userDefinedOrder.count
        
        print("[AppOrderManager] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print("[AppOrderManager] Persistence strategy: \(persistenceStrategy.description)")
        print("[AppOrderManager] –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isCustomOrderEnabled=\(savedEnabled)")
        print("[AppOrderManager] –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: isCustomOrderEnabled=\(isCustomOrderEnabled)")
        print("[AppOrderManager] –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤: \(savedCount)")
        
        return (customOrderEnabled: isCustomOrderEnabled, savedItemsCount: savedCount)
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
    func resetToAlphabetical() {
        isCustomOrderEnabled = false
        userDefinedOrder = []
        // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ didSet
    }
    
    /// –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –º–∞—Å—Å–∏–≤—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ –ø–µ—Ä–µ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    func applyCurrentOrder(_ apps: [AppInfo]) -> [AppInfo] {
        print("[AppOrderManager] applyCurrentOrder –≤—ã–∑–≤–∞–Ω –¥–ª—è \(apps.count) –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π")
        return sortApps(apps)
    }
    
    /// –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ä–µ–∂–∏–º—É
    func sortApps(_ apps: [AppInfo]) -> [AppInfo] {
        print("[AppOrderManager] sortApps –≤—ã–∑–≤–∞–Ω: isCustomOrderEnabled=\(isCustomOrderEnabled), userDefinedOrder.count=\(userDefinedOrder.count)")
        
        if !isCustomOrderEnabled || userDefinedOrder.isEmpty {
            // –ê–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
            print("[AppOrderManager] –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–ª—Ñ–∞–≤–∏—Ç–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫")
            return apps.sorted { $0.name.lowercased() < $1.name.lowercased() }
        }
        
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
        print("[AppOrderManager] –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ \(userDefinedOrder.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤)")
        return sortByUserOrder(apps)
    }
    
    /// –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º—É –ø–æ—Ä—è–¥–∫—É
    private func sortByUserOrder(_ apps: [AppInfo]) -> [AppInfo] {
        var sortedApps: [AppInfo] = []
        var remainingApps = apps
        let currentOrder = userDefinedOrder
        
        // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ –ø–æ bundleIdentifier
        for bundleId in currentOrder {
            if let index = remainingApps.firstIndex(where: { $0.bundleIdentifier == bundleId }) {
                sortedApps.append(remainingApps.remove(at: index))
            }
        }
        
        // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ) –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        let newApps = remainingApps.sorted { $0.name.lowercased() < $1.name.lowercased() }
        sortedApps.append(contentsOf: newApps)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫, –≤–∫–ª—é—á–∞—è –Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        updateUserOrderWithNewApps(sortedApps)
        
        return sortedApps
    }
    
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫, –¥–æ–±–∞–≤–ª—è—è –Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –∫–æ–Ω–µ—Ü
    private func updateUserOrderWithNewApps(_ apps: [AppInfo]) {
        let newOrder = apps.map { $0.bundleIdentifier }
        if newOrder != userDefinedOrder {
            userDefinedOrder = newOrder
            // –î–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è —á–µ—Ä–µ–∑ didSet
        }
    }
    
    /// –ü–µ—Ä–µ–º–µ—â–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é (–¥–ª—è drag & drop)
    func moveApp(from sourceIndex: Int, to destinationIndex: Int, in apps: [AppInfo]) -> [AppInfo] {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        guard sourceIndex >= 0 && sourceIndex < apps.count &&
              destinationIndex >= 0 && destinationIndex < apps.count else {
            logger.log(.error, "‚ùå Invalid indices: source=\(sourceIndex), dest=\(destinationIndex), apps.count=\(apps.count)")
            return apps
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ï—Å–ª–∏ –∏–Ω–¥–µ–∫—Å—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ, –Ω–µ –¥–µ–ª–∞–µ–º –Ω–∏—á–µ–≥–æ
        if sourceIndex == destinationIndex {
            logger.log(.info, "‚ö†Ô∏è Same position move - no action needed (index \(sourceIndex))")
            return apps
        }
        
        logger.logDragDrop("START \(instanceId.uuidString.prefix(8))", fromIndex: sourceIndex, toIndex: destinationIndex, appName: apps[sourceIndex].name)
        logger.log(.info, "üè¢ Instance \(instanceId.uuidString.prefix(8)) - isCustomOrderEnabled BEFORE: \(isCustomOrderEnabled)")
        logger.log(.info, "üéØ Global indices: source=\(sourceIndex), dest=\(destinationIndex), total apps=\(apps.count)")
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–∏
        if !isCustomOrderEnabled {
            logger.log(.info, "‚ö°Ô∏è Instance \(instanceId.uuidString.prefix(8)) - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞")
            enableCustomOrder()
            logger.log(.info, "‚ö°Ô∏è Instance \(instanceId.uuidString.prefix(8)) - isCustomOrderEnabled AFTER enableCustomOrder: \(isCustomOrderEnabled)")
        }
        
        // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —Å —É—á–µ—Ç–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
        var reorderedApps = apps
        let movedApp = reorderedApps.remove(at: sourceIndex)
        
        // –ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–Ω–¥–µ–∫—Å—ã —Å–¥–≤–∏–≥–∞—é—Ç—Å—è, –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º —Ü–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å
        let finalDestinationIndex: Int
        if destinationIndex > sourceIndex {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–ø—Ä–∞–≤–æ, —Ü–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ 1 –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            finalDestinationIndex = destinationIndex - 1
        } else {
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ—â–∞–µ–º –≤–ª–µ–≤–æ, —Ü–µ–ª–µ–≤–æ–π –∏–Ω–¥–µ–∫—Å –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–µ–º –∂–µ
            finalDestinationIndex = destinationIndex
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –ø–æ—Å–ª–µ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏
        let safeDestinationIndex = max(0, min(finalDestinationIndex, reorderedApps.count))
        reorderedApps.insert(movedApp, at: safeDestinationIndex)
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
        let newOrder = reorderedApps.map { $0.bundleIdentifier }
        let oldOrderCount = userDefinedOrder.count
        userDefinedOrder = newOrder
        
        logger.logDragDrop("COMPLETE", appName: movedApp.name)
        logger.log(.info, "üíæ –û–±–Ω–æ–≤–ª–µ–Ω –ø–æ—Ä—è–¥–æ–∫: \(oldOrderCount) ‚Üí \(newOrder.count) —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        logger.log(.info, "üìç Final position: \(movedApp.name) moved from \(sourceIndex) to \(safeDestinationIndex) (adjusted from \(destinationIndex))")
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ drag & drop
        debouncedSave()
        
        return reorderedApps
    }
    
    /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
    func getUserOrderIndex(for app: AppInfo) -> Int? {
        return userDefinedOrder.firstIndex(of: app.bundleIdentifier)
    }
    
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –Ω–µ –≤–∫–ª—é—á–µ–Ω–Ω—ã–µ –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—è–¥–æ–∫
    func hasNewApps(in apps: [AppInfo]) -> Bool {
        let currentBundleIds = Set(apps.map { $0.bundleIdentifier })
        let savedBundleIds = Set(userDefinedOrder)
        return !currentBundleIds.isSubset(of: savedBundleIds)
    }
    
    /// –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ä—è–¥–∫–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    func getOrderingStats(for apps: [AppInfo]) -> (customOrder: Int, newApps: Int, total: Int) {
        let customOrderCount = userDefinedOrder.count
        let totalApps = apps.count
        let newAppsCount = totalApps - customOrderCount
        
        return (customOrder: customOrderCount, newApps: max(0, newAppsCount), total: totalApps)
    }
}